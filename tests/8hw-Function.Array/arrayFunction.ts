//1Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–∞—Å–∏–≤—É  
function isInputAppay(input: any) {
    return Array.isArray(input)
}

console.log(isInputAppay("QA DOJO"));
console.log(isInputAppay([1, 2, 4, 0]))


//2Ô∏è‚É£ –ö–ª–æ–Ω—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É 
function cloneArray(array: Array<number>) {
    return array.slice();
}

const original = [1, 2, 4, 0];
const cloned = cloneArray(original);
cloned[0] = 19;

console.log(original);
console.log(cloned);


//3Ô∏è‚É£ –ü–µ—Ä—à—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É  
function firstElements(array: Array<any>, element: number = 1) {
    return array.slice(0, element)
};
const array = [2, 2, 3, 4, 4];
console.log(firstElements(array, 3));


//4Ô∏è‚É£ –û—Å—Ç–∞–Ω–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É 
function lastElements<T>(array: T[], element: number = 1) {
    return array.slice(-element);
};
const array1 = [1, 2, 3, 4, 4]
console.log(lastElements(array1, 3));


//5Ô∏è‚É£ –û–±‚Äô—î–¥–Ω–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –º–∞—Å–∏–≤—É
function jounArrayElements(array: Array<string>, divider: string) {
    return array.join(divider);
};
const myColor = ["Red", "Green", "White", "Black"];
console.log(jounArrayElements(myColor, "+"));


//6Ô∏è‚É£ –î–µ—Ñ—ñ—Å–∏ –º—ñ–∂ –ø–∞—Ä–Ω–∏–º–∏ —á–∏—Å–ª–∞–º–∏
function addDashesBtwnEvens(input: number): string {
    let numStr = input.toString();
    let result = numStr[0]; // –ü–æ—á–∏–Ω–∞—î–º–æ –∑ –ø–µ—Ä—à–æ—ó —Ü–∏—Ñ—Ä–∏

    for (let i = 1; i < numStr.length; i++) {
        if (+numStr[i] % 2 === 0 && +numStr[i - 1] % 2 === 0) {
            result += "-"; // –î–æ–¥–∞—î–º–æ –¥–µ—Ñ—ñ—Å –º—ñ–∂ –ø–∞—Ä–Ω–∏–º–∏ —á–∏—Å–ª–∞–º–∏
        }
        result += numStr[i]; // –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Ü–∏—Ñ—Ä—É
    }

    return result;
}

console.log(addDashesBtwnEvens(161685961));


//7Ô∏è‚É£ –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É
function sortedArray(arr: number[]) {
    const sortedArray: number[] = []; // –ù–æ–≤–∏–π –º–∞—Å–∏–≤ –¥–ª—è –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤

    for (let num of arr) { // –ü—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –∫–æ–∂–Ω–æ–º—É –µ–ª–µ–º–µ–Ω—Ç—É –º–∞—Å–∏–≤—É
        let i = 0;
        while (i < sortedArray.length && sortedArray[i] < num) { // –®—É–∫–∞—î–º–æ –º—ñ—Å—Ü–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            i++;
        }
        sortedArray.splice(i, 0, num); // –í—Å—Ç–∞–≤–ª—è—î–º–æ —á–∏—Å–ª–æ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–µ –º—ñ—Å—Ü–µ
    }

    return sortedArray;
}

const arr1 = [-3, 8, 7, 6, 5, -4, 3, 2, 1];
console.log(sortedArray(arr1));


//8Ô∏è‚É£ –ß–∏—Å–ª–∞ –≤—ñ–¥ 1 –¥–æ 345
function createArray(number: number) {
    const newArray: number[] = [];
    for (let i = 1; i <= number; i++) {
        newArray.push(i);
    };
    return newArray;
};
console.log(createArray(345));


//9Ô∏è‚É£–°—É–º–∞ —á–∏—Å–µ–ª –≤—ñ–¥ 1 –¥–æ 100
function sumOfnumbers(array: Array<number>) {
    let sum: number = 0;
    for (let num of array) {
        sum += num;
    };
    return sum
}

const arrWithNumbers = [1, 2, 3, 4, 5];
console.log(sumOfnumbers(arrWithNumbers));


//üîü–ß–∏—Å–ª–∞ –≤—ñ–¥ 241 –¥–æ 1
function createReverseArray(number: number) {
    const newArray: number[] = [];

    for (let i = number; i >= 1; i--) {
        newArray.push(i);
    }

    return newArray;
}

console.log(createReverseArray(241));


//1Ô∏è‚É£ 1Ô∏è‚É£ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ —á–∏—Å–ª–æ –∑ –¥–≤–æ—Ö
function maxNumber(a: number, b: number) {
    if (!Number.isInteger(a) || !Number.isInteger(b)) {
        console.log("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª—ñ —á–∏—Å–ª–∞.")
    } else if (a > b) {
        console.log(a);
    } else if (a < b) {
        console.log(b);
    } else if (a === b) {
        console.log("–û–±–∏–¥–≤–∞ —á–∏—Å–ª–∞ —Ä—ñ–≤–Ω—ñ")
    };
};

maxNumber(2, 3)


// Practice with Array's methods

// –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ Array
function isArray(data: any) {
    return Array.isArray(data);
}
console.log(isArray([2, 3, 4, 5, 8]));

//–ó–Ω–∞–π—Ç–∏ –≤—Å—ñ –ø–∞—Ä–Ω—ñ —á–∏—Å–ª–∞ —É –º–∞—Å–∏–≤—ñ
function findAllEvenNumbers(array: Array<number>) {
    return array.filter(n => n % 2 === 0); //
}
console.log(findAllEvenNumbers([2, 3, 4, 5, 8]));


//–ó–Ω–∞–π—Ç–∏ —Å—É–º—É –≤—Å—ñ—Ö —á–∏—Å–µ–ª —É –º–∞—Å–∏–≤—ñ
function findSumOfArray(array: Array<number>) {
    return array.reduce((sum, x) => sum + x, 0);
}
console.log(findSumOfArray([1, 2, 3]))


//–ü–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –º–∞—Å–∏–≤ —á–∏—Å–µ–ª —É –º–∞—Å–∏–≤ —ó—Ö–Ω—ñ—Ö –∫–≤–∞–¥—Ä–∞—Ç—ñ–≤
function squareArray(array: Array<number>) {
    return array.map(x => x ** 2);
}
console.log(squareArray([1, 2, 3]));


//–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –≤—Å—ñ —á–∏—Å–ª–∞ –±—ñ–ª—å—à–µ 5
function allNumbersAreGreaterN(array: Array<number>, n: number) {
    return array.every(x => x > n);
}
console.log(allNumbersAreGreaterN([9, 1], 5))


//–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ —î —Ö–æ—á–∞ –± –æ–¥–Ω–µ —á–∏—Å–ª–æ –±—ñ–ª—å—à–µ 5
function oneNumberIsGreaterN(array: Array<number>, n: number) {
    return array.some(x => x > n);
}
console.log(oneNumberIsGreaterN([1, 2, 3, 4, 5,], 3));

//–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∏ –º–∞—Å–∏–≤
function reverseArray(array: Array<number>) {
    return [...array].reverse(); // [...original] –ö–æ–ø—ñ—è –º–∞—Å–∏–≤—É
};

const randomArray = [1, 2, 3, 4, 5];
console.log(reverseArray(randomArray))
console.log(randomArray)

//–ó–Ω–∞–π—Ç–∏ –ø–µ—Ä—à–µ —á–∏—Å–ª–æ –±—ñ–ª—å—à–µ 5
function findFirstNumberGreaterThenN(array: Array<number>, num: number) {
    return array.find(n => n > num)
}
const anyArray = [1, 4, 5, 6, 7, 8];
console.log(findFirstNumberGreaterThenN(anyArray, 5));

//–í–∏–¥–∞–ª–∏—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –∑ –º–∞—Å–∏–≤—É
function removeDuplicates(array: Array<number>) {
    return [...new Set(array)];//new Set(arr) ‚Äì —Å—Ç–≤–æ—Ä—é—î Set, —â–æ –º—ñ—Å—Ç–∏—Ç—å –ª–∏—à–µ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è.
}
const arrWithDublicate = [1, 2, 2, 3, 3, 4, 5, 5];
console.log(removeDuplicates(arrWithDublicate));


//—Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –º–∞—Å–∏–≤ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é sclice()
function copyArray(array: Array<number>) {
    return array.slice() //slice() ‚Äì —Å—Ç–≤–æ—Ä—é—î –∫–æ–ø—ñ—é —á–∞—Å—Ç–∏–Ω–∏ –º–∞—Å–∏–≤—É, array.slice(0, 2) - [1, 2], array.slice(-3) - [4, 5, 5];
}
const originall = [1, 2, 2, 3, 3, 4, 5, 5];
console.log(copyArray(originall))


//–≤–∏–¥–∞–ª–∏ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É
function removeElementsOfArray(array: Array<number>) {
    return array.splice(0, 2);
}
const anyArray1 = [1, 2, 3, 4, 5, 6];
console.log(removeElementsOfArray(anyArray1)) // [1, 2];
console.log(anyArray1);


//—Ä–æ–∑–¥—ñ–ª–∏—Ç–∏ —Å—Ç—Ä—ñ–Ω–≥—É –∑ –∫—ñ–ª—å–∫–æ—Ö —Å–ª—ñ–≤ –Ω–∞ –º–∞—Å–∏–≤
function stringToArray(str: string) {
    return str.split(" ")
}
const anyString = "Marian Kolobych Stepanovych"
console.log(stringToArray(anyString))// ["Marian", "Kolobych", "Stepanovych"]


//–î–æ–¥–∞—Ç–∏ –≤ –∫—ñ–Ω–µ—Ü—å –º–∞—Å–∏–≤—É –µ–¥–µ–º–µ–Ω—Ç
function addElement(arr: Array<unknown>, data: any) {
    return arr.push(data) // –¥–æ–¥–∞—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç –≤ –∫—ñ–Ω–µ—Ü—å –º–∞—Å–∏–≤—É
}
const anyArray2 = ["1", 2, 3, 4]
console.log(addElement(anyArray2, "5"));
console.log(anyArray2) //["1", 2, 3, 4, "5"]


//–≤–∏–¥–∞–ª—è—î –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É
function RemoveElement(arr: Array<unknown>) {
    return arr.pop() //–≤–∏–¥–∞–ª—è—î –æ—Å—Ç–∞–Ω–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É
}
const anyArray3 = ["1", 2, 3, 4]
console.log(RemoveElement(anyArray3)) //4
console.log(anyArray3) //["1", 2, 3]

//–¥–æ–¥–∞–π –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç
function addFirstElement(arr: Array<unknown>, data: any) {
    return arr.unshift(data) //–¥–æ–¥–∞—î –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç
}
const anyArray4 = ["1", 2, 3, 4]
console.log(addFirstElement(anyArray4, 5)) //5
console.log(anyArray4) // [5,"1", 2, 3, 4]

//–≤–∏–¥–∞–ª—è—î –≤–∏–¥–∞–ª—è—î –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É
function RemoveFirstElement(arr: Array<unknown>) {
    return arr.shift() //–≤–∏–¥–∞–ª—è—î –≤–∏–¥–∞–ª—è—î –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É
}
const anyArray5 = ["1", 2, 3, 4]
console.log(RemoveFirstElement(anyArray5)) //"1"
console.log(anyArray5) //[2, 3, 4]

//–ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –∫–æ–∂–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É 
function returnElement(arr: number[]): number[] {
    arr.forEach(num => console.log(num)); // –í–∏–≤–æ–¥–∏—Ç—å –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É
    return arr; // –ü–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤
}

const numbers = [1, 2, 3, 4, 5];
const result = returnElement(numbers);

console.log(result);


// –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ —ñ–Ω–¥–µ–∫—Å –µ–ª–µ–º–µ–Ω—Ç–∞
function returnIndexOfElement(arr: Array<number>, index: number) {
    return arr.indexOf(index);
}
const array5 = [1, 2, 3, 4, 5, 6];
console.log(returnIndexOfElement(array5, 5)) //4


// —Å–æ—Ä—Ç—É—î –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É
function sortArray(arr: number[]) {
    return arr.sort((a, b) => a - b); // –°–æ—Ä—Ç—É—î –º–∞—Å–∏–≤ –∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º
}
const array6 = [5, 3, 6, 1, 4, 2];
console.log(sortArray(array6)); // [1, 2, 3, 4, 5, 6]


// –ó–Ω–∞–π—Ç–∏ –Ω–∞–π–±—ñ–ª—å—à–µ —á–∏—Å–ª–æ –≤ –º–∞—Å–∏–≤—ñ
function findMax1(arr: number[]) {
    return Math.max(...arr)// –∑–Ω–∞–π—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –º–∞—Å–≤—É, Math.min(...arr) –∑–Ω–∞–π—Ç–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
}
const array2 = [1, 2, 3, 4, 5]
console.log(findMax1(array2))


//–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø—Ä–∏–π–º–∞—î –º–∞—Å–∏–≤ —á–∏—Å–µ–ª —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —ó—Ö–Ω—é —Å—É–º—É.
function sumArray(arr: number[]) {
    return arr.reduce((sum, x) => sum + x, 0);
}
const array01 = [1, 2, 3, 4, 5]
console.log(sumArray(array01))


//–ü—ñ–¥—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Ä–Ω–∏—Ö —á–∏—Å–µ–ª —É –º–∞—Å–∏–≤—ñ
function countEvenNumbers(arr: number[]) {
    return arr.filter(n => n % 2 === 0).length;
}
// ‚úÖ filter().length ‚Äì –¥–ª—è –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–∞—Ä–Ω–∏—Ö —á–∏—Å–µ–ª.
// ‚úÖ filter().reduce() ‚Äì —è–∫—â–æ —Ç—Ä–µ–±–∞ –ø–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ —Å—É–º—É –ø–∞—Ä–Ω–∏—Ö —á–∏—Å–µ–ª

const array04 = [1, 2, 3, 4, 5]
console.log(countEvenNumbers(array04));


//–û–±'—î–¥–Ω–∞—Ç–∏ –¥–≤–∞ –º–∞—Å–∏–≤–∏ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω
//–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø—Ä–∏–π–º–∞—î –¥–≤–∞ –º–∞—Å–∏–≤–∏ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –æ–¥–∏–Ω –æ–±'—î–¥–Ω–∞–Ω–∏–π –º–∞—Å–∏–≤, —É —è–∫–æ–º—É –Ω–µ–º–∞—î –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤.
function mergeUnique(arr1: Array<unknown>, arr2: Array<unknown>) {
    const contactArray = arr1.concat(arr2);
    return [...new Set(contactArray)]
}
const arrOne = [1, 3, 4, 5, 6, 7, 8, "a"];
const arrTwo = [1, 3, "a", "b"]
console.log(mergeUnique(arrOne, arrTwo));


//–ü–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –º–∞—Å–∏–≤ —á–∏—Å–µ–ª —É –º–∞—Å–∏–≤ —ó—Ö–Ω—ñ—Ö –∫–≤–∞–¥—Ä–∞—Ç—ñ–≤
function squareNumbers(arr: number[]) {
    return arr.map(x => x ** 2)
}
const array06 = [1, 2, 3, 4, 5, 5, 6, 7]
console.log(squareNumbers(array06));
