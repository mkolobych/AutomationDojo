//1Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–∞—Å–∏–≤—É  
function isInputAppay(input: any) {
    return Array.isArray(input)
}

console.log(isInputAppay("QA DOJO"));
console.log(isInputAppay([1, 2, 4, 0]))


//2Ô∏è‚É£ –ö–ª–æ–Ω—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É 
function cloneArray(array: Array<number>) {
    return array.slice();
}

const original = [1, 2, 4, 0];
const cloned = cloneArray(original);
cloned[0] = 19;

console.log(original);
console.log(cloned);


//3Ô∏è‚É£ –ü–µ—Ä—à—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É  
function firstElements(array: Array<any>, element: number = 1) {
    return array.slice(0, element)
};
const array = [2, 2, 3, 4, 4];
console.log(firstElements(array, 3));


//4Ô∏è‚É£ –û—Å—Ç–∞–Ω–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É 
function lastElements<T>(array: T[], element: number = 1) {
    return array.slice(-element);
};
const array1 = [1, 2, 3, 4, 4]
console.log(lastElements(array1, 3));


//5Ô∏è‚É£ –û–±‚Äô—î–¥–Ω–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –º–∞—Å–∏–≤—É
function jounArrayElements(array: Array<string>, divider: string) {
    return array.join(divider);
};
const myColor = ["Red", "Green", "White", "Black"];
console.log(jounArrayElements(myColor, "+"));


//6Ô∏è‚É£ –î–µ—Ñ—ñ—Å–∏ –º—ñ–∂ –ø–∞—Ä–Ω–∏–º–∏ —á–∏—Å–ª–∞–º–∏
function addDashesBtwnEvens(input: number): string {
    let numStr = input.toString();
    let result = numStr[0]; // –ü–æ—á–∏–Ω–∞—î–º–æ –∑ –ø–µ—Ä—à–æ—ó —Ü–∏—Ñ—Ä–∏

    for (let i = 1; i < numStr.length; i++) {
        if (+numStr[i] % 2 === 0 && +numStr[i - 1] % 2 === 0) {
            result += "-"; // –î–æ–¥–∞—î–º–æ –¥–µ—Ñ—ñ—Å –º—ñ–∂ –ø–∞—Ä–Ω–∏–º–∏ —á–∏—Å–ª–∞–º–∏
        }
        result += numStr[i]; // –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Ü–∏—Ñ—Ä—É
    }

    return result;
}

console.log(addDashesBtwnEvens(161685961));


//7Ô∏è‚É£ –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É
function sortedArray(arr: number[]) {
    const sortedArray: number[] = []; // –ù–æ–≤–∏–π –º–∞—Å–∏–≤ –¥–ª—è –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤

    for (let num of arr) { // –ü—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –∫–æ–∂–Ω–æ–º—É –µ–ª–µ–º–µ–Ω—Ç—É –º–∞—Å–∏–≤—É
        let i = 0;
        while (i < sortedArray.length && sortedArray[i] < num) { // –®—É–∫–∞—î–º–æ –º—ñ—Å—Ü–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            i++;
        }
        sortedArray.splice(i, 0, num); // –í—Å—Ç–∞–≤–ª—è—î–º–æ —á–∏—Å–ª–æ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–µ –º—ñ—Å—Ü–µ
    }

    return sortedArray;
}

const arr1 = [-3, 8, 7, 6, 5, -4, 3, 2, 1];
console.log(sortedArray(arr1));


//8Ô∏è‚É£ –ß–∏—Å–ª–∞ –≤—ñ–¥ 1 –¥–æ 345
function createArray(number: number) {
    const newArray: number[] = [];
    for (let i = 1; i <= number; i++) {
        newArray.push(i);
    };
    return newArray;
};
console.log(createArray(345));


//9Ô∏è‚É£–°—É–º–∞ —á–∏—Å–µ–ª –≤—ñ–¥ 1 –¥–æ 100
function sumOfnumbers(array: Array<number>) {
    let sum: number = 0;
    for (let num of array) {
        sum += num;
    };
    return sum
}

const arrWithNumbers = [1, 2, 3, 4, 5];
console.log(sumOfnumbers(arrWithNumbers));


//üîü–ß–∏—Å–ª–∞ –≤—ñ–¥ 241 –¥–æ 1
function createReverseArray(number: number) {
    const newArray: number[] = [];

    for (let i = number; i >= 1; i--) {
        newArray.push(i);
    }

    return newArray;
}

console.log(createReverseArray(241));


//1Ô∏è‚É£ 1Ô∏è‚É£ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ —á–∏—Å–ª–æ –∑ –¥–≤–æ—Ö
function maxNumber(a: number, b: number) {
    if (!Number.isInteger(a) || !Number.isInteger(b)) {
        console.log("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª—ñ —á–∏—Å–ª–∞.")
    } else if (a > b) {
        console.log(a);
    } else if (a < b) {
        console.log(b);
    } else if (a === b) {
        console.log("–û–±–∏–¥–≤–∞ —á–∏—Å–ª–∞ —Ä—ñ–≤–Ω—ñ")
    };
};

maxNumber(2, 3)


// Practice with Array's methods

// –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ Array
function isArray(data: any) {
    return Array.isArray(data);
}
console.log(isArray([2, 3, 4, 5, 8]));

//–ó–Ω–∞–π—Ç–∏ –≤—Å—ñ –ø–∞—Ä–Ω—ñ —á–∏—Å–ª–∞ —É –º–∞—Å–∏–≤—ñ
function findAllEvenNumbers(array: Array<number>) {
    return array.filter(n => n % 2 === 0); //
}
console.log(findAllEvenNumbers([2, 3, 4, 5, 8]));


//–ó–Ω–∞–π—Ç–∏ —Å—É–º—É –≤—Å—ñ—Ö —á–∏—Å–µ–ª —É –º–∞—Å–∏–≤—ñ
function findSumOfArray(array: Array<number>) {
    return array.reduce((sum, x) => sum + x, 0);
}
console.log(findSumOfArray([1, 2, 3]))


//–ü–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –º–∞—Å–∏–≤ —á–∏—Å–µ–ª —É –º–∞—Å–∏–≤ —ó—Ö–Ω—ñ—Ö –∫–≤–∞–¥—Ä–∞—Ç—ñ–≤
function squareArray(array: Array<number>) {
    return array.map(x => x ** 2);
}
console.log(squareArray([1, 2, 3]));


//–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –≤—Å—ñ —á–∏—Å–ª–∞ –±—ñ–ª—å—à–µ 5
function allNumbersAreGreaterN(array: Array<number>, n: number) {
    return array.every(x => x > n);
}
console.log(allNumbersAreGreaterN([9, 1], 5))


//–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ —î —Ö–æ—á–∞ –± –æ–¥–Ω–µ —á–∏—Å–ª–æ –±—ñ–ª—å—à–µ 5
function oneNumberIsGreaterN(array: Array<number>, n: number) {
    return array.some(x => x > n);
}
console.log(oneNumberIsGreaterN([1, 2, 3, 4, 5,], 3));



